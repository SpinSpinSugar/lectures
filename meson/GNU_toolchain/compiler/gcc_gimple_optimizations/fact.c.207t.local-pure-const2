
;; Function fact (fact, funcdef_no=23, decl_uid=2546, cgraph_uid=24, symbol_order=23)



 local analysis of fact/23
   scanning: if (n_4(D) <= 1)
  scanning: return prephitmp_14;
  scanning: _1 = n_10 + -1;
  scanning: mult_acc_6 = n_10 * mult_acc_13;
  scanning: if (_1 == 1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 7 3 5 4 8 6
;;
;; Loop 1
;;  header 4, latch 6
;;  depth 1, outer 0
;;  nodes: 4 6
;; 2 succs { 7 5 }
;; 7 succs { 3 }
;; 3 succs { 1 }
;; 5 succs { 4 }
;; 4 succs { 8 6 }
;; 8 succs { 3 }
;; 6 succs { 4 }
Function is locally const.
int fact (int n)
{
  int _1;
  int mult_acc_6;
  int mult_acc_13;
  int prephitmp_14;

  <bb 2> [local count: 118111600]:
  if (n_4(D) <= 1)
    goto <bb 7>; [11.00%]
  else
    goto <bb 5>; [89.00%]

  <bb 7> [local count: 12992276]:

  <bb 3> [local count: 118111600]:
  # prephitmp_14 = PHI <mult_acc_6(8), n_4(D)(7)>
  return prephitmp_14;

  <bb 5> [local count: 105119324]:

  <bb 4> [local count: 955630225]:
  # n_10 = PHI <_1(6), n_4(D)(5)>
  # mult_acc_13 = PHI <mult_acc_6(6), 1(5)>
  _1 = n_10 + -1;
  mult_acc_6 = n_10 * mult_acc_13;
  if (_1 == 1)
    goto <bb 8>; [11.00%]
  else
    goto <bb 6>; [89.00%]

  <bb 8> [local count: 105119324]:
  goto <bb 3>; [100.00%]

  <bb 6> [local count: 850510901]:
  goto <bb 4>; [100.00%]

}



;; Function main (main, funcdef_no=24, decl_uid=2548, cgraph_uid=25, symbol_order=24) (executed once)



 local analysis of main/24
   scanning: __printf_chk (1, "%d\n", mult_acc_7);
  scanning: return 0;
  scanning: _6 = n_11 + -1;
  scanning: mult_acc_7 = n_11 * mult_acc_12;
  scanning: if (_6 == 1)
Function is locally looping.
Function can locally free.
int main ()
{
  int n;
  int _6;
  int mult_acc_7;
  int mult_acc_12;

  <bb 2> [local count: 118111600]:
  goto <bb 4>; [100.00%]

  <bb 3> [local count: 118111600]:
  __printf_chk (1, "%d\n", mult_acc_7);
  return 0;

  <bb 5> [local count: 837518624]:

  <bb 4> [local count: 955630225]:
  # n_11 = PHI <_6(5), 10(2)>
  # mult_acc_12 = PHI <mult_acc_7(5), 1(2)>
  _6 = n_11 + -1;
  mult_acc_7 = n_11 * mult_acc_12;
  if (_6 == 1)
    goto <bb 3>; [12.36%]
  else
    goto <bb 5>; [87.64%]

}


