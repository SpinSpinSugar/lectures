
;; Function fact (fact, funcdef_no=23, decl_uid=2546, cgraph_uid=24, symbol_order=23)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
n = &NONLOCAL
n_2 = n
n_2 = _1
mult_acc_5 = &NONLOCAL
mult_acc_5 = mult_acc_6
mul_tmp_7 = n_2 + UNKNOWN
mul_tmp_7 = mult_acc_5 + UNKNOWN
_1 = n_2 + UNKNOWN
_1 = &NONLOCAL
mult_acc_6 = n_2 + UNKNOWN
mult_acc_6 = mult_acc_5 + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"n"[label="n = { 5 }"];
"n_2";
"_1"[label="_1 = { 5 }"];
"mult_acc_5"[label="mult_acc_5 = { 5 }"];
"mult_acc_6";
"mul_tmp_7";
"fact";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*n";
"*n_2";
"*_1";
"*mult_acc_5";
"*mult_acc_6";
"*mul_tmp_7";
"*fact";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"n" -> "n_2";
"_1" -> "n_2";
"mult_acc_6" -> "mult_acc_5";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"n";
"n_2" [label="\N\nn_2 = n_2 + UNKNOWN\lmult_acc_6 = n_2 + UNKNOWN\lmul_tmp_7 = n_2 + UNKNOWN\l"];
"mult_acc_5" [label="\N\nmult_acc_6 = mult_acc_5 + UNKNOWN\lmul_tmp_7 = mult_acc_5 + UNKNOWN\l"];
"mult_acc_6";
"mul_tmp_7";
"fact";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "n_2";
"STOREDANYTHING" -> "mult_acc_6";
"STOREDANYTHING" -> "mul_tmp_7";
"n" -> "n_2";
"mult_acc_6" -> "mult_acc_5";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"n";
"n_2" [label="\N\nn_2 = n_2 + UNKNOWN\lmult_acc_6 = n_2 + UNKNOWN\lmul_tmp_7 = n_2 + UNKNOWN\l"];
"mult_acc_5" [label="\N\nmult_acc_6 = mult_acc_5 + UNKNOWN\lmul_tmp_7 = mult_acc_5 + UNKNOWN\l"];
"mult_acc_6";
"mul_tmp_7";
"fact";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "n_2";
"STOREDANYTHING" -> "mult_acc_6";
"STOREDANYTHING" -> "mul_tmp_7";
"n" -> "n_2";
"mult_acc_6" -> "mult_acc_5";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
n = { NONLOCAL }
n_2 = { NONLOCAL }
_1 = { NONLOCAL } same as n_2
mult_acc_5 = { NONLOCAL }
mult_acc_6 = { NONLOCAL }
mul_tmp_7 = { NONLOCAL }
fact = { }


Alias information for fact

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


int fact (int n)
{
  int _1;
  int mult_acc_5;
  int mult_acc_6;
  int mul_tmp_7;

  <bb 2> [local count: 118111600]:

  <bb 3> [local count: 1073741824]:
  # n_2 = PHI <n_4(D)(2), _1(5)>
  # mult_acc_5 = PHI <1(2), mult_acc_6(5)>
  if (n_2 <= 1)
    goto <bb 4>; [11.00%]
  else
    goto <bb 5>; [89.00%]

  <bb 4> [local count: 118111600]:
  mul_tmp_7 = n_2 * mult_acc_5;
  return mul_tmp_7;

  <bb 5> [local count: 955630225]:
  _1 = n_2 + -1;
  mult_acc_6 = n_2 * mult_acc_5;
  goto <bb 3>; [100.00%]

}



;; Function main (main, funcdef_no=24, decl_uid=2548, cgraph_uid=25, symbol_order=24) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
n_3 = &NONLOCAL
n_3 = _6
mult_acc_4 = &NONLOCAL
mult_acc_4 = mult_acc_7
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = mult_acc_4
_6 = n_3 + UNKNOWN
_6 = &NONLOCAL
mult_acc_7 = n_3 + UNKNOWN
mult_acc_7 = mult_acc_4 + UNKNOWN

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 3 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"n_3"[label="n_3 = { 5 }"];
"_6"[label="_6 = { 5 }"];
"mult_acc_4"[label="mult_acc_4 = { 5 }"];
"mult_acc_7";
"__printf_chk";
"main";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*n_3";
"*_6";
"*mult_acc_4";
"*mult_acc_7";
"*__printf_chk";
"*main";

  // Edges in the constraint graph:
"mult_acc_4" -> "ESCAPED";
"*ESCAPED" -> "ESCAPED";
"_6" -> "n_3";
"mult_acc_7" -> "mult_acc_4";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"n_3" [label="\N\nn_3 = n_3 + UNKNOWN\lmult_acc_7 = n_3 + UNKNOWN\l"];
"mult_acc_4" [label="\N\nmult_acc_7 = mult_acc_4 + UNKNOWN\l"];
"mult_acc_7";
"__printf_chk";
"main";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "n_3";
"STOREDANYTHING" -> "mult_acc_7";
"mult_acc_4" -> "ESCAPED";
"mult_acc_7" -> "mult_acc_4";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"n_3" [label="\N\nn_3 = n_3 + UNKNOWN\lmult_acc_7 = n_3 + UNKNOWN\l"];
"mult_acc_4" [label="\N\nmult_acc_7 = mult_acc_4 + UNKNOWN\l"];
"mult_acc_7";
"__printf_chk";
"main";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "n_3";
"STOREDANYTHING" -> "mult_acc_7";
"mult_acc_4" -> "ESCAPED";
"mult_acc_7" -> "mult_acc_4";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
n_3 = { NONLOCAL }
_6 = { NONLOCAL } same as n_3
mult_acc_4 = { NONLOCAL }
mult_acc_7 = { NONLOCAL }
__printf_chk = { }
main = { }


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


int main ()
{
  int n;
  int mult_acc_4;
  int _6;
  int mult_acc_7;

  <bb 2> [local count: 118111600]:

  <bb 3> [local count: 1073741824]:
  # n_3 = PHI <10(2), _6(5)>
  # mult_acc_4 = PHI <1(2), mult_acc_7(5)>
  if (n_3 == 1)
    goto <bb 4>; [11.00%]
  else
    goto <bb 5>; [89.00%]

  <bb 4> [local count: 118111600]:
  __printf_chk (1, "%d\n", mult_acc_4);
  return 0;

  <bb 5> [local count: 955630225]:
  _6 = n_3 + -1;
  mult_acc_7 = n_3 * mult_acc_4;
  goto <bb 3>; [100.00%]

}


